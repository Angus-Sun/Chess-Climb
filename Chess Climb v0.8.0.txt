
#A chess platformer game made by Angus Sun
#Chess Climb Alpha 0.8.0
import simplegui, math, time
#textures for backgrounds
WORLD1BGRD = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102849462575038516/world1bgrd3.png?width=1280&height=720")

CHESS_MOVES = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1107563797251620874/moveguide2.png?width=1280&height=720")
CHESS_MOVES2 = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1107571836293763123/moveguide3.png?width=1280&height=720")
CHESS_GUIDE_DIALOGUE_BOX = simplegui.load_image("https://media.discordapp.net/attachments/904942659792150580/1107512549932548137/chessclimbguidedefaultdialogue.png?width=1280&height=720")
TUTORIAL_OVERLAY = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1107513757640446022/chessclimbblackoverlay.png?width=1280&height=720")
#sound effects
MOVE_SOUND 	= simplegui.load_sound("https://cdn.discordapp.com/attachments/794098849739702282/1107147007132442714/YOYOYO.mp3")
DEATH_SOUND = simplegui.load_sound("https://cdn.discordapp.com/attachments/794098849739702282/1107148509863477248/goofy_ahh_scream.mp3")
BUTTON_SOUND = simplegui.load_sound("https://cdn.discordapp.com/attachments/794098849739702282/1107150882572877855/buttonsound.mp3")
WORLD1_MUSIC = simplegui.load_sound("https://cdn.discordapp.com/attachments/794098849739702282/1107182500268216331/hatenovillage.mp3")
LEVEL_SELECT_MUSIC = simplegui.load_sound("https://cdn.discordapp.com/attachments/794098849739702282/1107179707121815593/onlymp3.to_-_Miitopia_OST_-_Cottage-Lb-lJXLBWSo-256k-1656541717758.mp3")
TALKING_SOUND = simplegui.load_sound("https://cdn.discordapp.com/attachments/794098849739702282/1107546255703412837/onlymp3.to_-_Just_Sans_talking-TQqyArvAn4k-256k-1657490797433.mp3")
CRATEBREAK = simplegui.load_sound("https://cdn.discordapp.com/attachments/794098849739702282/1110356244876767302/onlymp3.to_-_Impact_Wood_Crack-_Sound_Effect_SFX-aONb6YffPT8-256k-1654092474711_1.mp3")
CRATECRACK = simplegui.load_sound("https://cdn.discordapp.com/attachments/794098849739702282/1110356396035293224/onlymp3.to_-_Impact_Wood_Crack-_Sound_Effect_SFX-aONb6YffPT8-256k-1654092474711_3.mp3")
TUTORIAL_MUSIC = simplegui.load_sound("https://cdn.discordapp.com/attachments/794098849739702282/1107210579350933564/onlymp3.to_-_Tutorial_Instrumental-yaAIfEvQPkE-256k-1659868494390.mp3")
#textures for buttons
HINT_BUTTON = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1108110775710658660/hintbutton.png?width=960&height=383")
GUIDE_BUTTON = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1107921788618428467/guidebutton3.png?width=788&height=788")
NOTHING = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1107424744694882314/120px-Antonia_Sautter_Creations.png?width=107&height=107")
LOCKED_BUTTON = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1101181561258397776/lockedbutton.png?width=788&height=788")
START_BUTTON = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1107198461130063942/start_button1.png?width=958&height=383")
NEXT_BUTTON = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1107564649433534504/nextbutton.png?width=958&height=383")
MENU_BACK_BUTTON = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1108110776125882429/backbutton.png?width=958&height=383")
TUTORIAL_BUTTON = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1107198460890992681/tutorial.png?width=958&height=383")

LVL1_BUTTON = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1094686238444888095/level_select_defualt_button.png?width=788&height=788")
LVL2_BUTTON = LOCKED_BUTTON
LVL3_BUTTON = LOCKED_BUTTON
LVL4_BUTTON = LOCKED_BUTTON
LVL5_BUTTON = LOCKED_BUTTON
LVL6_BUTTON = LOCKED_BUTTON
LVL7_BUTTON = LOCKED_BUTTON
LVL8_BUTTON = LOCKED_BUTTON
LVL9_BUTTON = LOCKED_BUTTON
LVL10_BUTTON = LOCKED_BUTTON
LVL11_BUTTON = LOCKED_BUTTON
LVL12_BUTTON = LOCKED_BUTTON
LVL13_BUTTON = LOCKED_BUTTON
LVL14_BUTTON = LOCKED_BUTTON
LVL15_BUTTON = LOCKED_BUTTON
LVL16_BUTTON = LOCKED_BUTTON
LVL1_COMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1101188637602881688/level1completed.png?width=788&height=788")
LVL2_UNCOMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1101755192195686400/uncompletdlvl2button.png?width=788&height=788")
LVL2_COMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1094686446570459237/level_select_defualt_button_for_white.png?width=788&height=788")           
LVL3_UNCOMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102711575305007165/level3uncompleted.png?width=788&height=788")
LVL3_COMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102711575057551450/level3completed.png?width=788&height=788")   
LVL4_UNCOMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102711574491312220/level4uncompleted.png?width=788&height=788")
LVL4_COMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102711574831042632/level4completed.png?width=788&height=788")   
LVL5_UNCOMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102711506971402332/level5uncompleted.png?width=788&height=788")
LVL5_COMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102711507206291547/level5completed.png?width=788&height=788")   
LVL6_UNCOMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102711472322269245/level6uncompleted.png?width=788&height=788")
LVL6_COMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102711471999299664/level6completed.png?width=788&height=788")   
LVL7_UNCOMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102711425467691098/level7uncompleted.png?width=788&height=788")
LVL7_COMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102711425677402222/level7completed.png?width=788&height=788")   
LVL8_UNCOMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102711394828300388/level8uncompleted.png?width=788&height=788")
LVL8_COMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102711395071565934/level8completed.png?width=788&height=788")   
LVL9_UNCOMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1110979761884377128/level9uncompleted.png?width=788&height=788")
LVL9_COMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1110979762089885836/level9completed.png?width=788&height=788")
LVL10_UNCOMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1110979761410420766/level10uncompleted.png?width=788&height=788")
LVL10_COMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1110979761662074970/level10completed.png?width=788&height=788")
LVL11_UNCOMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1110979760898703500/level11uncompleted.png?width=788&height=788")
LVL11_COMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1110979761141981194/level11completed.png?width=788&height=788")
LVL12_UNCOMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1110979760647053453/level12uncompleted.png?width=788&height=788")
LVL12_COMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1110979760391192626/level12completed.png?width=788&height=788")
LVL13_UNCOMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1110979759850135634/level13uncompleted.png?width=788&height=788")
LVL13_COMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1110979760110186598/level13completed.png?width=788&height=788")
LVL14_UNCOMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1110979716657201172/level14uncompleted.png?width=788&height=788")
LVL14_COMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1110979716879483111/level14completed.png?width=788&height=788")
LVL15_UNCOMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1110979716090966056/level15uncompleted.png?width=788&height=788")
LVL15_COMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1110979716325834752/level15completed.png?width=788&height=788")
LVL16_UNCOMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1110979715558293514/level16uncompleted.png?width=788&height=788")
LVL16_COMPLETED = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1110979715814129694/level16completed.png?width=572&height=572")

SELECTIONBGRD = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1103184591482798080/levelselcltbgrd.png?width=1280&height=720")
RESTART_BUTTON = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1094738235646804100/restart_button_.png?width=788&height=788")
BACK_BUTTON = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1094738235432902818/back_button.png?width=788&height=788")
CRATE1 = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1109719588398174349/crate1.png?width=230&height=230")
CRATE2 = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1109719588133945485/crate2.png?width=230&height=230")
#textures for chess pieces
BLACK_KING = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102856522058440734/bk2.png?width=788&height=788")
BLACK_PAWN = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1094770976203477093/bP_2.png?width=788&height=788")
WHITE_KING = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102854292714565644/wk3.png?width=788&height=788")
WHITE_PAWN = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1094770976878759966/wP_2.png?width=577&height=743")
WHITE_QUEEN = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1094770977096876102/wQ_2.png?width=788&height=788")
WHITE_ROOK = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102854274326732840/wr2.png?width=788&height=788")
WHITE_HORSE = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1096898599759130654/HORSE.png?width=788&height=788")
WHITE_BISHOP = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1096660156529520660/wbishop.png?width=788&height=788")
#textures for main menu
MENU_IMAGE = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1107196037896085564/chessclimb.png?width=1280&height=720")
#textures for blocks
#world 1 
GRASS = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102832440411684945/grass.png?width=140&height=140")
CONNECTED_DIRT = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102835874896556132/connected.png?width=140&height=140")
LEFT_GRASS = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102832915689246780/left.png?width=140&height=140")
RIGHT_GRASS = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102834673073270845/right.png?width=140&height=140")
RIGHT_DIRT_SURFACELESS = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102835035633111091/rightdirt.png?width=140&height=140")
LEFT_DIRT_SURFACELESS = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102835166998708224/leftdirt.png?width=141&height=141")
LEFT_GRASS_FLOAT = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1103049358280237217/left_floating_grass.png")
GRASS_FLOAT = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1103049357911146586/floating_grass.png")
RIGHT_GRASS_FLOAT = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1103049357546233876/floating_grass_right.png")
LEFT_WALL_GRASS = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102837268202397718/leftwallgrass.png?width=140&height=140")
RIGHT_WALL_GRASS = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102837312930467850/rightwallgrass.png?width=140&height=140")
BOTTOM_RIGHT_DIRT = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102839406311780392/bottomrightconnected.png?width=140&height=140")
BOTTOM_LEFT_DIRT = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1102839488465621012/bottomleftconnected.png?width=140&height=140")
FLOAT_BOTTOMLEFT_DIRT = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1103053483856375849/floating_connected_bottom_left.png?width=140&height=140")
FLOAT_BOTTOM_DIRT = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1103053483562762291/floating_connected_bottom.png?width=140&height=140")
FLOAT_BOTTOMRIGHT_DIRT = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1103053483134955520/floating_conected_bottom_right.png?width=140&height=140")
#world 2
OCEANBGRD = simplegui.load_image("https://media.discordapp.net/attachments/794098849739702282/1111318998458581083/ocean1.png?width=1280&height=720")

BUTTON_SIZE = 788, 788
WIDTH = 1280
HEIGHT = 720
IMG_SIZES = {START_BUTTON: (958, 383),
             TUTORIAL_BUTTON: (958, 383),
             LVL1_BUTTON: (BUTTON_SIZE),
             LVL2_BUTTON: (BUTTON_SIZE),
             LVL3_BUTTON: (BUTTON_SIZE),
             LVL4_BUTTON: (BUTTON_SIZE),
             LVL5_BUTTON: (BUTTON_SIZE),
             LVL6_BUTTON: (BUTTON_SIZE),
             LVL7_BUTTON: (BUTTON_SIZE),
             LVL8_BUTTON: (BUTTON_SIZE),
             SELECTIONBGRD: (1280, 720),
             RESTART_BUTTON: (BUTTON_SIZE),
             MENU_BACK_BUTTON: (958,383),
             BACK_BUTTON: (BUTTON_SIZE),
             WHITE_KING: (BUTTON_SIZE),
             WORLD1BGRD: (1280, 720),
             CRATE1: (230, 230),
             NOTHING: (107, 107),
             NEXT_BUTTON: (958, 383),
             GUIDE_BUTTON: (BUTTON_SIZE),
             HINT_BUTTON: (958, 383),
             LVL1_COMPLETED: (BUTTON_SIZE),
             LVL2_UNCOMPLETED: (BUTTON_SIZE),
             LVL2_COMPLETED: (BUTTON_SIZE),
             LVL3_UNCOMPLETED: (BUTTON_SIZE),
             LVL3_COMPLETED: (BUTTON_SIZE),
             LVL4_UNCOMPLETED: (BUTTON_SIZE),
             LVL4_COMPLETED: (BUTTON_SIZE),
             LVL5_UNCOMPLETED: (BUTTON_SIZE),
             LVL5_COMPLETED: (BUTTON_SIZE),
             LVL6_UNCOMPLETED: (BUTTON_SIZE),
             LVL6_COMPLETED: (BUTTON_SIZE),
             LVL7_UNCOMPLETED: (BUTTON_SIZE),
             LVL7_COMPLETED: (BUTTON_SIZE),
             LVL8_UNCOMPLETED: (BUTTON_SIZE),
             LVL8_COMPLETED: (BUTTON_SIZE),
             LVL9_UNCOMPLETED: (BUTTON_SIZE),
             LVL9_COMPLETED: (BUTTON_SIZE),
             LVL10_UNCOMPLETED: (BUTTON_SIZE),
             LVL10_COMPLETED: (BUTTON_SIZE),
             LVL11_UNCOMPLETED: (BUTTON_SIZE),
             LVL11_COMPLETED: (BUTTON_SIZE),
             LVL12_UNCOMPLETED: (BUTTON_SIZE),
             LVL12_COMPLETED: (BUTTON_SIZE),
             LVL13_UNCOMPLETED: (BUTTON_SIZE),
             LVL13_COMPLETED: (BUTTON_SIZE),
             LVL14_UNCOMPLETED: (BUTTON_SIZE),
             LVL14_COMPLETED: (BUTTON_SIZE),
             LVL15_UNCOMPLETED: (BUTTON_SIZE),
             LVL15_COMPLETED: (BUTTON_SIZE),
             LVL16_UNCOMPLETED: (BUTTON_SIZE),
             LVL16_COMPLETED: (BUTTON_SIZE)}  

GRAVITY = 0.5
GRAVITYMAX = 10
TILE_SIZE = [80, 80]
button_width,button_height = IMG_SIZES[START_BUTTON]
lvlbutton_width, lvlbutton_height = IMG_SIZES[LVL1_BUTTON]
selectionbgrd_width, selectionbgrd_height = IMG_SIZES[SELECTIONBGRD]
legalmove = True
tutorial_list = []
for i in range(1, 12):
    tutorial_list.append('tutorial ' + str(i))
tutorial_list2 = []
for i in range(12, 33):
    tutorial_list2.append('tutorial ' + str(i))
tutorial_list3 = ['tutorial 34 hint', 'tutorial 34 hint 2']
for i in range(33, 40):
    tutorial_list3.append('tutorial ' + str(i))
tutorial_list4 = ['tutorial 34 hint', 'tutorial 34 hint 2']
for i in range(35, 40):
    tutorial_list4.append('tutorial ' + str(i))

fulltutorial_list = tutorial_list + tutorial_list2 + tutorial_list3    
world_1 = []
for i in range(1, 9):
    world_1.append('level ' + str(i))
world_2 = []
for i in range(9, 17):
    world_2.append('level ' + str(i))
world_1_buttons = [LVL1_BUTTON, LVL2_BUTTON, LVL3_BUTTON, LVL4_BUTTON, LVL5_BUTTON, LVL6_BUTTON, LVL7_BUTTON, LVL8_BUTTON]
world_2_buttons = [LVL9_BUTTON, LVL10_BUTTON, LVL11_BUTTON, LVL12_BUTTON, LVL13_BUTTON, LVL14_BUTTON, LVL15_BUTTON, LVL16_BUTTON]
uncompleted_buttons_1 = [LVL2_UNCOMPLETED, LVL3_UNCOMPLETED, LVL4_UNCOMPLETED, LVL5_UNCOMPLETED, LVL6_UNCOMPLETED, LVL7_UNCOMPLETED, LVL8_UNCOMPLETED]
uncompleted_buttons_2 = [LVL9_UNCOMPLETED, LVL10_UNCOMPLETED, LVL11_UNCOMPLETED, LVL12_UNCOMPLETED, LVL13_UNCOMPLETED, LVL14_UNCOMPLETED, LVL15_UNCOMPLETED, LVL16_UNCOMPLETED]
completed_buttons_1 = [LVL1_COMPLETED, LVL2_COMPLETED, LVL3_COMPLETED, LVL4_COMPLETED, LVL5_COMPLETED, LVL6_COMPLETED, LVL7_COMPLETED, LVL8_COMPLETED]
completed_buttons_2 = [LVL9_COMPLETED, LVL10_COMPLETED, LVL11_COMPLETED, LVL12_COMPLETED, LVL13_COMPLETED, LVL14_COMPLETED, LVL15_COMPLETED, LVL16_COMPLETED]
levels = world_1 + world_2 + fulltutorial_list
level_selects = ['level select 1', 'level select 2', 'level select 3']
crates = ['c1', 'c2', 'c3', 'c4', 'c5']
levels_unlocked = world_1 + world_2
levels_completed = []
block_list = []
crate_list = []
playerclicks = []
w_kings = []
w_rooks = []
w_knights = []
w_bishops = []
b_king = []
piece_list = []
piece_positions = []
current_level = ''
block_numbers = list(range(1, 17)) + crates
b_kingtouchcount = 0
level_select_volume = 0
displayedmessage = ''
displayedmessage2 = ''
guidemenu = False
#levels
lvl_1 = []
lvl_2 = []
lvl_3 = []
lvl_4 = []
lvl_5 = []
lvl_6 = []
lvl_7 = []
lvl_8 = []
tutorial1 = [] 
tutorial2 = []
class Scene:
    #draws the buttons for specific scenes of the game
    def __init__(self, name, buttons):
        self.name = name
        self.buttons = buttons
    
    def draw(self, canvas):
        for button in self.buttons:
            button.draw(canvas)

class Button:
    #creates buttons
    def __init__(self, position, size, image, destination):
        self.pos = position
        self.size = size
        self.image = image
        self.destination = destination
        self.enabled = True
    
    def draw(self,canvas):
        width, height = IMG_SIZES[self.image]
        canvas.draw_image(self.image,
                          (width / 2, height / 2),
                          (width, height),
                          (self.pos),
                          (self.size))
    
    def button_selected(self, click_position):
        #checks if button is selected
        global current_scene, current_lvl, lvl_1, lvl_2, world, w_kings, w_bishops, tutorial1, current_level, guidemenu
        global w_rooks, w_knights, block_list, piece_list, b_king, lvl_3, piece_positions, crate_list, b_kingtouchcount
        global displayedmessage, displayedmessage2, tutorial_list2, cguidedialogues
        #checks whether mouse is within left and right borders of button
        
        in_x = abs(click_position[0] - self.pos[0]) < self.size[0]/2
        
        #checks whether mouse is within top and bottom borders of button
        in_y = abs(click_position[1] - self.pos[1]) < self.size[1]/2
        if in_x and in_y:
            displayedmessage = ''
            displayedmessage2 = ''
            BUTTON_SOUND.rewind()
            BUTTON_SOUND.play()    
            if self.destination in fulltutorial_list + tutorial_list4:
                for cguidedialogue in cguidedialogues:
                    if cguidedialogue != None:
                        cguidedialogue.dialoguepos = 0        
            if current_scene not in level_selects:
                current_scene = self.destination

            elif current_scene in level_selects:
                if self.destination == 'menu' or self.destination in level_selects:
                    current_scene = self.destination

                elif self.destination in levels_unlocked:
                    current_scene = self.destination
                #checks if the level the button is leading to is unlocked
                for level in levels:
                    if self.destination in levels:
                        if self.destination in levels_unlocked:
                            current_scene = self.destination
            if guidemenu == False:
                #resets the level before entering
                if self.destination in world_2:
                    GRAVITY = -0.5
                if self.destination in levels:
                    if current_scene not in tutorial_list4:
                        current_level = current_scene
                        w_kings = []
                        w_bishops = []
                        w_rooks = []
                        w_knights = []
                        block_list = []
                        piece_list = []
                        crate_list = []
                        piece_positions = []
                        b_king = []
                        b_kingtouchcount = 0

                    if self.destination in tutorial_list:
                        tutorial1 = [
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 'wk', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'bk', 0, 0],
                            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                            [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]
                        world = Stage(tutorial1)
                        current_lvl = tutorial1
                    if self.destination in tutorial_list2:
                        tutorial2 = [
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 'wk', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'bk', 0, 0],
                            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                            [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]
                        world = Stage(tutorial2)
                        current_lvl = tutorial2

                    if self.destination in tutorial_list3:
                        cguidedialogues[33].dialoguepos = 0
                        cguidedialogues[34].dialoguepos = 0
                        tutorial3 = [
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 'wr', 0, 'wk', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'bk'],
                            [1, 1, 1, 1, 4, 0, 0, 0, 0, 3, 1, 1, 1, 1, 1, 1],
                            [2, 2, 2, 2, 5, 0, 0, 0, 0, 6, 2, 2, 2, 2, 2, 2],
                            [2, 2, 2, 2, 5, 0, 0, 0, 0, 6, 2, 2, 2, 2, 2, 2],
                            [2, 2, 2, 2, 12, 10, 1, 1, 11, 13, 2, 2, 2, 2, 2, 2]]
                        if current_scene not in tutorial_list4:
                            world = Stage(tutorial3)                                
                            current_lvl = tutorial3
                    if self.destination == 'level 1':

                        #world 1

                        #0 = air
                        #1 = default ground texture
                        #2 = connected ground texture
                        #3 = left edge ground texture
                        #4 = right edge grond texture
                        #5 surfaceless left ground texture
                        #6 surfaceless right ground texture
                        #7 floating left edge grass
                        #8 floating grass
                        #9 floating right edge grass
                        #10 grass coming from left wall
                        #11 grass coming from right wall
                        #12 dirt connecting grass to bottom right of wall
                        #13 dirt connecting grass to bottom left of wall
                        #14 floating left edge bottom dirt
                        #15 floating bottom dirt
                        #16 floating right edge bottom dirt
                        lvl_1 = [
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'bk'],
                            [1, 1, 1, 1, 4, 0, 0, 0, 0, 3, 1, 1, 1, 1, 1, 1],
                            [2, 2, 2, 2, 5, 0, 0, 0, 0, 6, 2, 2, 2, 2, 2, 2],
                            [2, 2, 2, 2, 5, 0, 0, 0, 'wb', 6, 2, 2, 2, 2, 2, 2],
                            [2, 2, 2, 2, 12, 10, 1, 1, 11, 13, 2, 2, 2, 2, 2, 2]]

                        world = Stage(lvl_1)
                        current_lvl = lvl_1
                if self.destination == 'level 2':
                        lvl_2 = [
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 'wr', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [8, 8, 8, 8, 8, 8, 8, 8, 9, 0, 7, 8, 8, 8, 8, 8],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [8, 8, 9, 0, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 0, 7, 8],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'bk', 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 9, 0]]


                        world = Stage(lvl_2)
                        current_lvl = lvl_2

                if self.destination == 'level 3':

                        lvl_3 = [
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 'bk', 0, 0, 0, 0, 0, 0, 0],
                            [8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0],
                            [0, 'wb', 0, 0, 0, 0, 0, 'wr', 'wk', 0, 0, 6, 5, 0, 0, 0],
                            [1, 1, 1, 1, 4, 0, 0, 3, 4, 0, 0, 6, 5, 0, 0, 0],
                            [2, 2, 2, 2, 5, 0, 0, 6, 5, 0, 0, 6, 5, 0, 0, 0],
                            [2, 2, 2, 2, 12, 10, 11, 13, 12, 10, 11, 13, 12, 10, 1, 1]]



                        world = Stage(lvl_3)
                        current_lvl = lvl_3

                if self.destination == 'level 4':

                    lvl_4 = [
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                            [7, 8, 8, 8, 8, 8, 9, 0, 0, 3, 4, 0, 0, 0, 2, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 0, 0, 2, 0],
                            ['wkt', 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 0, 0, 2, 0],
                            ['wk', 0, 0, 'wb', 0, 3, 4, 0, 0, 6, 5, 0, 0, 0, 15, 'bk'],
                            [1, 1, 1, 1, 11, 13, 12, 10, 11, 13, 12, 10, 1, 1, 1, 1],
                            [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]

                    world = Stage(lvl_4)
                    current_lvl = lvl_4

                if self.destination == 'level 5':
                    lvl_5 = [
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0],
                            [0, 0, 0, 0, 0, 0, 0, 3, 1, 4, 0, 0, 0, 6, 5, 0],
                            [0, 0, 0, 1, 0, 0, 0, 6, 2, 5, 0, 0, 0, 6, 5, 0],
                            [0, 0, 0, 2, 0, 0, 0, 6, 2, 5, 0, 0, 0, 6, 5, 0],
                            [0, 'wkt', 0, 15, 'wkt', 'wk', 0, 6, 2, 5, 'wb', 'wr', 0, 6, 5, 'bk'],
                            [1, 1, 1, 1, 1, 1, 11, 13, 2, 12, 10, 1, 11, 13, 12, 10],
                            [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]


                    world = Stage(lvl_5)
                    current_lvl = lvl_5

                if self.destination == 'level 6':
                    lvl_6 = [
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 'wr', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 8, 9],
                            [1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'bk'],
                            [2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 1],
                            [2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 2, 2],
                            [2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 2, 2],
                            [2, 2, 5, 'wkt', 0, 'wb', 0, 'wr', 0, 'wkt', 0, 'wkt', 6, 2, 2, 2],
                            [2, 2, 12, 10, 1, 1, 1, 1, 1, 1, 1, 11, 13, 2, 2, 2]]
                    world = Stage(lvl_6)
                    current_lvl = lvl_6
                if self.destination == 'level 7':
                    lvl_7 = [
                            [0, 0, 0, 0, 0, 0, 'wkt', 0, 0, 0, 0, 0, 0, 0, 'wk', 0],
                            [1, 1, 1, 1, 1, 1, 4, 0, 3, 1, 1, 1, 1, 1, 1, 1],
                            [15, 15, 15, 15, 15, 15, 5, 0, 6, 15, 15, 15, 15, 15, 15, 15],
                            [0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 'wr'],
                            [0, 3, 4, 0, 0, 0, 5, 0, 6, 0, 7, 8, 8, 8, 8, 9],
                            [0, 6, 5, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0],
                            [0, 6, 5, 0, 0, 0, 16, 'c2', 14, 7, 8, 8, 8, 8, 9, 0],
                            ['bk', 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [11, 13, 12, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
                    world = Stage(lvl_7)
                    current_lvl = lvl_7


                if self.destination == 'level 8':
                    lvl_8 = [
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 'wkt', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                            [15, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 15, 2, 2],
                            [0, 2, 2, 2, 0, 2, 2, 2, 15, 2, 2, 15, 2, 0, 2, 2],
                            [2, 15, 2, 2, 15, 2, 2, 2, 0, 15, 2, 0, 2, 15, 2, 2],
                            [2, 0, 15, 15, 'wb', 15, 15, 15, 0, 0, 2, 15, 2, 0, 2, 2],
                            [2, 2, 'bk', 0, 2, 0, 0, 0, 2, 2, 2, 0, 2, 2, 2, 2],
                            [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]]
                    world = Stage(lvl_8)
                    current_lvl = lvl_8
                
                if self.destination == 'level 9':
                    lvl_9 = [
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
                    world = Stage(lvl_9)
                    current_lvl = lvl_9



                

        
def mouse_click(pos):
    global TILE_SIZE, col, row, current_scene, sqselected, playerclicks, world
    global move, Stage, current_lvl, offsetx, offsety, legalmove, w_rookrow, piece_list, crates
    global w_rookcol, positions, w_bishoprow, w_bishopcol, w_kingrow, block_numbers, TILE_SIZE
    
    
            
    for button in draw_scene.buttons:
            button.button_selected(pos)
            
    if current_scene in levels:
        #Divides the level grid into columns and rows
        col = pos[0]//TILE_SIZE[0]
        row = pos[1]//TILE_SIZE[1]
        #centers pieces in each grid
        offsetx = 40
        offsety = 45
        #stores the column and row that the pieces are currently in
        positions = []
        if w_kings != []:
            for w_king in w_kings:
                positions.append([w_king.row, w_king.col])
        
        if w_bishops != []:
            for w_bishop in w_bishops:
                positions.append([w_bishop.row, w_bishop.col])
        
        if w_rooks != []:
            for w_rook in w_rooks:
                positions.append([w_rook.row, w_rook.col])
        
        if w_knights != []:
            for w_knight in w_knights:
                positions.append([w_knight.row, w_knight.col])
        
        if w_kings != []:
            for w_king in w_kings:
                if [row, col] == [w_king.row, w_king.col]:
                    unselectpieces()
                    w_king.selected = True
                   
                if w_king.selected == True and w_king.falling == False:
                    #checks if the player click being moved to is solid or not
                    if current_lvl[row][col] not in block_numbers:
                        #king can only move one tile from all sides
                        if w_king.row in range(row - 1, row + 2) and w_king.col in range(col -1, col + 2):
                            legalmove = True
                            pieceobstructioncheck(w_king.row, w_king.col)
                            positionpiece(w_king)
                            
        if w_bishops != []:
            for w_bishop in w_bishops:
                if [row, col] == [w_bishop.row, w_bishop.col]:
                    unselectpieces()
                    w_bishop.selected = True
            
                if w_bishop != []:    
                    if w_bishop.selected == True and w_bishop.falling == False:
                        if current_lvl[row][col] not in block_numbers:
                            
                        #checks if absolute value of horizontal and vertical displacement are equal for diagonal movement
                            if abs(row - w_bishop.row) == abs(col - w_bishop.col) and abs(row - w_bishop.row) > 0 or row == w_bishop.row and col == w_bishop.col:
                                
                                legalmove = True
                                pieceobstructioncheck(w_bishop.row, w_bishop.col)  
                                bishopobstructioncheck() 
                                positionpiece(w_bishop)
                                w_bishop.falling = True
        
        if w_rooks != []:
            for w_rook in w_rooks:
                if [row, col] == [w_rook.row, w_rook.col]:
                    unselectpieces()
                    w_rook.selected = True

                if w_rook.selected == True and w_rook.falling == False:
                    if current_lvl[row][col] not in block_numbers:
                        if row == w_rook.row or col == w_rook.col:
                            rookobstructioncheck()
                            pieceobstructioncheck(w_rook.row, w_rook.col)      
                            positionpiece(w_rook)
                            w_rook.falling = True
        if w_knights != []:       
            for w_knight in w_knights:
                if [row, col] == [w_knight.row, w_knight.col]:
                    unselectpieces()
                    w_knight.selected = True

                if w_knight.selected == True and w_knight.falling == False:
                    if current_lvl[row][col] not in block_numbers:
                        #checks if knight moves in an L pattern
                        if (col == w_knight.col + 1 or col == w_knight.col - 1) and (row == w_knight.row - 2 or row == w_knight.row + 2):
                            legalmove = True
                            pieceobstructioncheck(w_knight.row, w_knight.col)
                            positionpiece(w_knight)
                            w_knight.falling = True
                        elif (row == w_knight.row - 1 or row == w_knight.row + 1) and (col == w_knight.col + 2 or col == w_knight.col - 2):
                            legalmove = True
                            pieceobstructioncheck(w_knight.row, w_knight.col)
                            positionpiece(w_knight)
                            w_knight.falling = True
                        elif row == w_knight.row and col == w_knight.col:
                            legalmove = True
                            positionpiece(w_knight)
                            w_knight.falling = True
        
def rookobstructioncheck():
    global legalmove, block_numbers, w_rooks
    #checks if there is an object between rook position and click position horizontally to see if it's a legal move
    for w_rook in w_rooks:
        if w_rook.selected == True and w_rook.falling == False:
            if row == w_rook.row:
                legalmove = True
                if col > w_rook.col:
                    for c in range(w_rook.col, col):
                        if current_lvl[w_rook.row][c] in block_numbers:
                            legalmove = False
                        else:
                            for position in positions:
                                if position != [w_rook.row, w_rook.col]:
                                    for c in range(w_rook.col, col):
                                        if [w_rook.row, c] == position:
                                            legalmove = False
                else:
                    for c in range(col, w_rook.col):
                        if current_lvl[w_rook.row][c] in block_numbers:
                            legalmove = False
                        else:
                            for position in positions:
                                if position != [w_rook.row, w_rook.col]:
                                    for c in range(col, w_rook.col):
                                        if [w_rook.row, c] == position:
                                            legalmove = False
            #checks if there is an object between rook position and click position vertically to see if it's a legal move        
            if col == w_rook.col:
                legalmove = True
                if row > w_rook.row:
                    for r in range(w_rook.row, row):
                        if current_lvl[r][w_rook.col] in block_numbers:
                            legalmove = False
                        else:
                            for position in positions:
                                if position != [w_rook.row, w_rook.col]:
                                    for r in range(w_rook.row, row):
                                        if [r, w_rook.col] == position:
                                            legalmove = False
                else:
                    for r in range(row, w_rook.row):
                        if current_lvl[r][w_rook.col] in block_numbers:
                            legalmove = False
                        else:
                            for position in positions:
                                if position != [w_rook.row, w_rook.col]:
                                    for r in range(row, w_rook.row):
                                        if [r, w_rook.col] == position:
                                            legalmove = False

def bishopobstructioncheck():
    global legalmove, block_numbers, current_lvl
    #checks if there are objects diagonal up to the right of bishop
    for w_bishop in w_bishops:
        if w_bishop.selected == True and w_bishop.falling == False:
            if row < w_bishop.row and col > w_bishop.col:
                for c in range(w_bishop.col, col):
                    for r in range(row, w_bishop.row):
                        if abs(r - w_bishop.row) == abs(c - w_bishop.col): 
                            if current_lvl[r][c] in block_numbers:
                                legalmove = False
                        else:
                            for position in positions:
                                if position != [w_bishop.row, w_bishop.col]:
                                    for c in range(w_bishop.col, col):
                                        for r in range(row, w_bishop.row):
                                            if [r, c] == position and abs(r - w_bishop.row) == abs(c - w_bishop.col): 
                                                legalmove = False
                                                
                for r in range(row, w_bishop.row):
                    for c in range(w_bishop.col, col):
                         if abs(r - w_bishop.row) == abs(c - w_bishop.col): 
                            if current_lvl[r][c] in block_numbers:
                                legalmove = False
                            else:
                                for position in positions:
                                    if position != [w_bishop.row, w_bishop.col]:
                                        for r in range(row, w_bishop.row):
                                            for c in range(w_bishop.col, col):
                                                if [r, c] == position and abs(r - w_bishop.row) == abs(c - w_bishop.col): 
                                                    legalmove = False
                                                    
            #checks if there are objects diagonal up to the left of bishop                                    
            elif row < w_bishop.row and col < w_bishop.col:
                for c in range(col, w_bishop.col):
                    for r in range(row, w_bishop.row):
                        if abs(w_bishop.row - r) == abs(w_bishop.col - c): 
                            if current_lvl[r][c] in block_numbers: 
                                legalmove = False
                        else:
                            for position in positions:
                                if position != [w_bishop.row, w_bishop.col]:
                                    for c in range(col, w_bishop.col):
                                        for r in range(row, w_bishop.row):
                                            if [r, c] == position and abs(r - w_bishop.row) == abs(c - w_bishop.col): 
                                                legalmove = False
                
                for r in range(row, w_bishop.row):
                    for c in range(col, w_bishop.col):
                        if current_lvl[r][c] in block_numbers:
                            if abs(r - w_bishop.row) == abs(c - w_bishop.col): 
                                legalmove = False
                        else:
                            for position in positions:
                                if position != [w_bishop.row, w_bishop.col]:
                                    for r in range(row, w_bishop.row):
                                        for c in range(col, w_bishop.col):
                                            if [r, c] == position and abs(r - w_bishop.row) == abs(c - w_bishop.col): 
                                                legalmove = False
                                                
            #checks if there are objects diagonal down to the right of the bishop
            elif row > w_bishop.row and col > w_bishop.col:
                for c in range(w_bishop.col, col):
                    for r in range(w_bishop.row, row):
                        if current_lvl[r][c] in block_numbers and abs(r - w_bishop.row) == abs(c - w_bishop.col):
                            legalmove = False
                        else:
                            for position in positions:
                                if position != [w_bishop.row, w_bishop.col]:
                                    for c in range(w_bishop.col, col):
                                        for r in range(w_bishop.row, row):
                                            if [r, c] == position and abs(r - w_bishop.row) == abs(c - w_bishop.col): 
                                                legalmove = False
                

            #checks if there are objects diagnoal down to the left of the bishop
            elif row > w_bishop.row and col < w_bishop.col:
                for c in range(col, w_bishop.col):
                    for r in range(w_bishop.row, row):
                        if current_lvl[r][c] in block_numbers and abs(r - w_bishop.row) == abs(c - w_bishop.col): 
                            legalmove = False
                        else:
                            for position in positions:
                                if position != [w_bishop.row, w_bishop.col]:
                                    for c in range(col, w_bishop.col):
                                        for r in range(w_bishop.row, row):
                                            if [r, c] == position and abs(r - w_bishop.row) == abs(c - w_bishop.col): 
                                                legalmove = False
    

            if w_bishop.row == row and w_bishop.col == col:
                legalmove = True
        
def pieceobstructioncheck(piecerow, piececol):
    #checks if player click is at a piece position
    global legalmove, b_king, piece_list
    
    for piece in piece_list:
            if piece.falling == True:
                legalmove = False
                
    if b_king[0].collidable == False:
        legalmove = False
    for position in positions:
        if position != [piecerow, piececol]:
            if [row, col] == position:
                legalmove = False
            
def positionpiece(piece):
    global legalmove, levels_completed, b_king, current_lvl, MOVE_SOUND, piece_list
                
    #positions piece and adds an offset to x and y position to center the image when clicked
    if legalmove:
        piece.pos = [col * TILE_SIZE[0] + offsetx, row * TILE_SIZE[1] + offsety]
        piece.newpos = True
        MOVE_SOUND.rewind()
        MOVE_SOUND.play()
        
    if b_king != []:
        if piece.pos == b_king[0].pos:
            levels_completed.append(current_lvl)
        
def unselectpieces():
    if w_kings != []:
        for w_king in w_kings:
            w_king.selected = False
    if w_bishops != []:
        for w_bishop in w_bishops:
            w_bishop.selected = False
    if w_rooks != []:
        for w_rook in w_rooks:
            w_rook.selected = False     
    if w_knights != []:
        for w_knight in w_knights:
            w_knight.selected = False                
class Stage:
    def __init__(self, current_lvl):
        
        global wking, crate_list
        x = TILE_SIZE[0]/2
        y = TILE_SIZE[1]/2
        
        kingcount = 0
        rookcount = 0
        bishopcount = 0
        knightcount = 0 
        
        for row in current_lvl:
            for tile in row:
                #spawns in pieces and blocks
                if tile == 1:
                    block_list.append(Block(GRASS, [x, y],(TILE_SIZE)))
                    
                if tile == 2:
                    block_list.append(Block(CONNECTED_DIRT, [x, y],(TILE_SIZE)))
                    
                if tile == 3:
                    block_list.append(Block(LEFT_GRASS, [x, y],(TILE_SIZE)))
                    
                if tile == 4:
                    block_list.append(Block(RIGHT_GRASS, [x, y],(TILE_SIZE)))
                
                if tile == 5:
                    block_list.append(Block(RIGHT_DIRT_SURFACELESS, [x, y],(TILE_SIZE)))
                
                if tile == 6:
                    block_list.append(Block(LEFT_DIRT_SURFACELESS, [x, y],(TILE_SIZE)))
                
                if tile == 7:
                    block_list.append(Block(LEFT_GRASS_FLOAT, [x, y],(TILE_SIZE)))
                
                if tile == 8:
                    block_list.append(Block(GRASS_FLOAT, [x, y],(TILE_SIZE)))
                
                if tile == 9:
                    block_list.append(Block(RIGHT_GRASS_FLOAT, [x, y],(TILE_SIZE)))
                
                if tile == 10:
                    block_list.append(Block(LEFT_WALL_GRASS, [x, y],(TILE_SIZE)))
                
                if tile == 11:
                    block_list.append(Block(RIGHT_WALL_GRASS, [x, y],(TILE_SIZE)))
                
                if tile == 12:
                    block_list.append(Block(BOTTOM_RIGHT_DIRT, [x, y],(TILE_SIZE)))
                    
                if tile == 13:
                    block_list.append(Block(BOTTOM_LEFT_DIRT, [x, y],(TILE_SIZE)))
                
                if tile == 14:
                    block_list.append(Block(FLOAT_BOTTOMLEFT_DIRT, [x, y],(TILE_SIZE)))
                
                if tile == 15:
                    block_list.append(Block(FLOAT_BOTTOM_DIRT, [x, y],(TILE_SIZE)))
                
                if tile == 16:
                    block_list.append(Block(FLOAT_BOTTOMRIGHT_DIRT, [x, y],(TILE_SIZE)))
                    
                if tile == 'wk':
                    kingcount += 1
                    if len(w_kings) <= kingcount:
                       w_kings.append(Piece(WHITE_KING, [x, y],(TILE_SIZE)))  
                    
                if tile == 'wb':
                    bishopcount += 1
                    if len(w_bishops) <= bishopcount:
                        w_bishops.append(Piece(WHITE_BISHOP, [x, y],(TILE_SIZE)))  
                        
                if tile == 'wkt':
                    knightcount += 1
                    if len(w_knights) <= knightcount:
                        w_knights.append(Piece(WHITE_HORSE, [x, y],(TILE_SIZE)))  
                        
                if tile == 'wr':
                    rookcount += 1
                    if len(w_rooks) <= rookcount:
                        w_rooks.append(Piece(WHITE_ROOK, [x, y],(TILE_SIZE))) 
                        
                if tile == 'bk':
                    b_king.append(Black_king(BLACK_KING, [x, y + 5], (TILE_SIZE)))
                
                if tile == 'c2':
                    crate_list.append(Crate([x, y], (TILE_SIZE), 2))
                
                if tile == 'c3':
                    crate_list.append(Crate([x, y], (TILE_SIZE), 3))
                    
                if tile == 'c4':
                    crate_list.append(Crate([x, y], (TILE_SIZE), 4))
                
                if tile == 'c5':
                    crate_list.append(Crate([x, y], (TILE_SIZE), 5))
                x += TILE_SIZE[0]
            y += TILE_SIZE[1]
            x = TILE_SIZE[0]/2
        
class Block:
    
    def __init__(self, image, position, size):
        self.image = image
        self.pos = position
        self.size = size
    
    def draw(self, canvas):
        #spawns and draws the blocks
        canvas.draw_image(self.image,
                          (self.image.get_width()/2, self.image.get_width()/2),
                          (self.image.get_width(), self.image.get_width()),
                          self.pos,
                          self.size)
class Black_king:
    
    def __init__(self, image, position, size):
        self.image = image
        self.pos = position
        self.size = size
        self.death = False
        self.animated = False
        self.vel_y = 0
        self.rotation = 0
        self.animationdone = False
        self.collidable = True
        self.dead = False
    def draw(self, canvas):
        global current_scene, draw_scene, scene_lvlselect1, world, current_lvl, tutorial2
        global w_kings, w_bishops, w_rooks, w_knights, block_list, piece_list, crate_list, piece_positions, b_king
        #spawns and draws the blocks
        canvas.draw_image(self.image,
                          (self.image.get_width()/2, self.image.get_width()/2),
                          (self.image.get_width(), self.image.get_width()),
                          self.pos,
                          self.size,
                          self.rotation)
        if self.death == True:
            self.animated = True
            self.rotation += 0.1
            self.vel_y -= GRAVITY + 3
            self.pos[1] += self.vel_y
        if self.vel_y < - 8:
            self.death = False
            
        
        if self.animated == True and self.death == False:
            DEATH_SOUND.play()
            self.rotation += 0.1
            self.vel_y += GRAVITY
            self.pos[1] += self.vel_y
            
        if self.pos[1] > HEIGHT + 120:
            self.dead = True
            self.animated = False
            if current_scene not in fulltutorial_list:
                current_scene = 'level select 1'
class Crate:
    
    def __init__(self, position, size, piecestobreak):
        self.pos = position
        self.size = size
        self.col = int(self.pos[0] // TILE_SIZE[0])
        self.row = int(self.pos[1] // TILE_SIZE[1])
        #pieces needed on the crate to break it
        self.limit = piecestobreak
        self.piecesoncrate = 0
        self.oneoncrate = False
    def draw(self, canvas):
        global CRATE_SIZE
        #spawns and draws the crates
        #normal crate
        if self.limit - self.piecesoncrate == 2:
            w,h = IMG_SIZES[CRATE1]
            canvas.draw_image(CRATE2,
                              (w/2, w/2),
                              (h, h),
                              self.pos,
                              self.size)
        #crate is cracked when a piece lands on it
        else:
            w,h = IMG_SIZES[CRATE1]
            canvas.draw_image(CRATE1,
                              (w/2, w/2),
                              (h, h),
                              self.pos,
                              self.size)
    def update(self):
        #crate gets removed when two pieces are on it at the same time
        global crate_list, piece_list
        self.piecesoncrate = 0
        if self.limit == 2:
            for crate in crate_list:
                for piece in piece_list:
                    if crate.row - 1 == piece.row and crate.col == piece.col:
                        self.piecesoncrate = 1
                        if self.oneoncrate == False:
                            CRATECRACK.play()
                            self.oneoncrate = True
                        for piece in piece_list:
                            if crate.row - 2 == piece.row and crate.col == piece.col: 
                                crate_list.remove(crate)
                                CRATEBREAK.play()
                                
class Piece:
    
    def __init__(self, image, position, size):
        self.image = image
        self.pos = position
        self.size = size
        self.selected = False
        self.falling = True
        self.vel_y = 0
        self.x = self.pos[0]
        self.y = self.pos[1]
        self.col = int(self.pos[0] // TILE_SIZE[0])
        self.row = int(self.pos[1] // TILE_SIZE[1])
        self.newpos = False
        self.animated = False
    def draw(self, canvas):
        #spawns and draws the bricks
        canvas.draw_image(self.image,
                          (self.image.get_width()/2, self.image.get_width()/2),
                          (self.image.get_width(), self.image.get_width()),
                          self.pos,
                          self.size)
        
    
    
    def update(self):
        global current_scene, b_kingtouchcount
        #adds gravity
        self.col = int(self.pos[0] // TILE_SIZE[0])

        self.row = int(self.pos[1] // TILE_SIZE[1])

        self.pos[1] += self.vel_y
        if self.falling:
            self.vel_y += GRAVITY
        
        if self.newpos == True:
            self.size = [60, 60]
            self.newpos = False
        if self.size != TILE_SIZE:
            self.size[0] += 4
            self.size[1] += 4
        for block in block_list:
            #allows pieces to stack if on top of each other
            for piece in piece_list:
                if (self.pos,
                        self.size[0]/2,
                        self.size[0]/2,
                        self.size[1]/2,
                        self.size[1]/2) != (piece.pos,
                                            piece.size[0]/2,
                                            piece.size[0]/2,
                                            piece.size[1]/2,
                                            piece.size[1]/2):

                        if obj_collision(self.pos, self.size[0]/2, self.size[0]/2, 
                                         self.size[1]/2, self.size[1]/2, piece.pos, 
                                         piece.size[0]/2, piece.size[0]/2, piece.size[1]/2, 
                                         piece.size[1]/2) and self.pos[1] < piece.pos[1]:
                            self.vel_y = 0
                            self.pos[1] = piece.pos[1] - 80
                            self.falling = False
                            
            #checks if there is a block beneath the piece    
              
            if self.pos[0] == block.pos[0] and self.pos[1] + 75 != block.pos[1]:
                #checks if there is a piece beneath the piece
                if [self.pos[0], self.pos[1] + 80] not in piece_positions:
                    self.falling = True
                                
            
            for crate in crate_list:
                if self.pos[0] == crate.pos[0] and self.pos[1] + 75 != crate.pos[1]:
                    #checks if there is a piece beneath the piece
                    if [self.pos[0], self.pos[1] + 80] not in piece_positions:
                        self.falling = True
                        
        #checks if pieces are touching blocks
        for block in block_list:             
            if obj_collision(self.pos, self.size[0]/2, self.size[0]/2, 
                             self.size[1]/2, self.size[1]/2, block.pos, 
                             block.size[0]/2, block.size[0]/2, block.size[1]/2, 
                             block.size[1]/2):
                self.vel_y = 0
                self.pos[1] = block.pos[1] - 75
                self.falling = False
                
        for crate in crate_list:             
            if obj_collision(self.pos, self.size[0]/2, self.size[0]/2, 
                             self.size[1]/2, self.size[1]/2, crate.pos, 
                             crate.size[0]/2, crate.size[0]/2, crate.size[1]/2, 
                             crate.size[1]/2):
                self.vel_y = 0
                self.pos[1] = crate.pos[1] - 75
                self.falling = False
                

        #checks if piece touches black king
        if b_king != []:
            if obj_collision(self.pos, self.size[0]/2, self.size[0]/2, 
                            self.size[1]/2, self.size[1]/2, b_king[0].pos,
                            b_king[0].size[0]/2, b_king[0].size[0]/2, b_king[0].size[1]/2, 
                            b_king[0].size[1]/2) and b_king[0].collidable == True:
                b_king[0].death = True
                b_king[0].collidable = False
                if current_scene not in tutorial_list + tutorial_list2 + tutorial_list3:
                    if 'level' + current_scene[6] not in levels_completed:
                        levels_completed.append(current_scene)
                        levels_unlocked.append('level' + " " + str(int(current_scene[6]) + 1))

class Dialogue:
    def __init__(self, position, message):
        self.message = message
        self.image = CHESS_GUIDE_DIALOGUE_BOX
        self.pos = position
        self.dialoguepos = 0
        self.counter = 0

    def draw(self, canvas):
        global displayedmessage
        canvas.draw_image(TUTORIAL_OVERLAY, 
                          (WIDTH / 2, HEIGHT / 2),
                          (WIDTH, HEIGHT),
                          (WIDTH / 2, HEIGHT / 2),
                          (WIDTH, HEIGHT))
        
        canvas.draw_image(CHESS_GUIDE_DIALOGUE_BOX, 
                          (WIDTH / 2, HEIGHT / 2),
                          (WIDTH, HEIGHT),
                          (self.pos[0], self.pos[1]),
                          (WIDTH, HEIGHT))
        
        canvas.draw_text(displayedmessage, [self.pos[0] - 570, self.pos[1] + 180],70, 'white', 'sans-serif')
        canvas.draw_text(displayedmessage2, [self.pos[0] - 570, self.pos[1] + 280], 70, 'white', 'sans-serif')
        
    def update(self):
        global legalmove, displayedmessage, displayedmessage2, TALKING_SOUND
        self.counter += 1
        if self.dialoguepos == len(self.message)-1:
            TALKING_SOUND.pause()
        elif self.dialoguepos <= 31 and self.counter % 2 == 0:
            displayedmessage += self.message[self.dialoguepos]
            self.dialoguepos += 1
        elif self.dialoguepos >= 31 and self.counter % 2 == 0:
            if self.dialoguepos < len(self.message)-1:
                self.dialoguepos += 1
                displayedmessage2 += self.message[self.dialoguepos]
        if self.dialoguepos != len(self.message)-1:
            TALKING_SOUND.play()

                
            for piece in piece_list:
                piece.falling = True
                

class Musicsfx:
    def __init__(self, sound, volume):
        self.sound = sound
        self.volume = volume
    
    def fadein(self):
        self.sound.play()
        if self.volume < 1:

            self.volume += 0.01
            self.sound.set_volume(self.volume)
            self.sound.play()
            if self.volume > 0.99:
                self.volume = 1


    def fadeout(self):
        if self.volume >= 0:
            self.sound.play()
            self.sound.set_volume(self.volume)
            self.volume -= 0.01
            if self.volume < 0.01:
                self.sound.rewind()
            
        
def obj_collision(obj1_pos, obj1_left, obj1_right, obj1_up,
                  obj1_down, obj2_pos,
                  obj2_left, obj2_right, obj2_up, obj2_down):
    #if the entity's left or right side is within the other entity
    if (obj1_pos[0] + obj1_right + obj2_right > obj2_pos[0]
    and obj2_pos[0] > obj1_pos[0] - obj1_left - obj2_left):
        #if the entity's up or down side is within the other entity
        if (obj1_pos[1] + obj1_down + obj2_up > obj2_pos[1] 
        and obj2_pos[1] > obj1_pos[1] - obj1_up - obj2_down):
            return True     

def draw(canvas):
    global current_scene, buttons, button_start_game, draw_scene, scene_guide1, uncompleted_buttons_1, completed_buttons_1
    global SELECTIONBGRD, selectionbgrd_width, selectionbgrd_height, lvlbutton_x, lvlbutton_y, crates
    global IMG_SIZES, block_list, white_pieces, wking, world, lvl_1, world_1_buttons, block_numbers, world_2_buttons
    global piece_list, level, w_kingrow, piece_positions, button_lvl1, tutorial_list2, button_levelback
    global button_lvl2, scene_lvlselect1, LVL1_BUTTON, LVL2_BUTTON, lvlbutton_width, lvlbutton_height, WIDTH, HEIGHT, IMG_SIZES
    global button_restartlvl, current_scene, scene_lvl, WORLD1BGRD, current_lvl, LVL3_BUTTON, LVL4_BUTTON, LVL5_BUTTON, count
    global LVL6_BUTTON, LVL7_BUTTON, LVL8_BUTTON, crate_list, sound_volume, level_selection_effects, MENU_IMAGE, legalmove
    global button_lvl1, button_lvl2, button_lvl3, button_lvl4, button_lvl5, button_lvl6, button_lvl7, button_lvl8, guidemenu
    
    if current_scene in world_1:
        button_levelback = Button([WIDTH/2 - 570,HEIGHT/2 - 310], (lvlbutton_width/9, lvlbutton_height/9), BACK_BUTTON, 'level select 1') 
    elif current_scene in world_2:
        button_levelback = Button([WIDTH/2 - 570,HEIGHT/2 - 310], (lvlbutton_width/9, lvlbutton_height/9), BACK_BUTTON, 'level select 2') 
    button_guide2 = Button([WIDTH/2, HEIGHT/2], (button_width/4, button_height/4), NEXT_BUTTON, current_level)
    if current_scene == 'tutorial 34':
        button_restartlvl = Button([WIDTH/2 - 450,HEIGHT/2 - 310], (lvlbutton_width/9, lvlbutton_height/9), RESTART_BUTTON, 'tutorial 34')
        button_guide = Button([WIDTH/2 - 530,HEIGHT/2 - 310], (lvlbutton_width/9, lvlbutton_height/9), GUIDE_BUTTON, 'guide') 
    else:
        button_restartlvl = Button([WIDTH/2 - 450,HEIGHT/2 - 310], (lvlbutton_width/9, lvlbutton_height/9), RESTART_BUTTON, current_scene)
        button_guide = Button([WIDTH/2 - 330,HEIGHT/2 - 310], (lvlbutton_width/9, lvlbutton_height/9), GUIDE_BUTTON, 'guide') 
        
    scene_lvl = Scene('level 1', [button_restartlvl, button_levelback, button_guide])
    scene_guide1 = Scene('guide 1', [button_guide1])
    scene_guide2 = Scene('guide 2', [button_guide2])
    scene_tutorial35 = Scene('tutorial 34', [button_restartlvl, button_guide,button_hint1])
   
    
    for i in range(1, 9):
        if world_1[i-1] in levels_completed:
            world_1_buttons[i-1] = completed_buttons_1[i-1]
        elif world_1[i-1] in levels_unlocked:
            if i != 1:
                world_1_buttons[i-1] = uncompleted_buttons_1[i-2]
        if world_2[i-1] in levels_completed:
            world_2_buttons[i-1] = completed_buttons_2[i-1]
        elif world_2[i-1] in levels_unlocked:
            world_2_buttons[i-1] = uncompleted_buttons_2[i-2]

        
            
    IMG_SIZES = {START_BUTTON: (958, 383),
             TUTORIAL_BUTTON: (958, 383),
             LVL1_BUTTON: (BUTTON_SIZE),
             LVL2_BUTTON: (BUTTON_SIZE),
             LVL3_BUTTON: (BUTTON_SIZE),
             LVL4_BUTTON: (BUTTON_SIZE),
             LVL5_BUTTON: (BUTTON_SIZE),
             LVL6_BUTTON: (BUTTON_SIZE),
             LVL7_BUTTON: (BUTTON_SIZE),
             LVL8_BUTTON: (BUTTON_SIZE),
             SELECTIONBGRD: (1280, 720),
             RESTART_BUTTON: (BUTTON_SIZE),
             MENU_BACK_BUTTON: (958,383),
             BACK_BUTTON: (BUTTON_SIZE),
             WHITE_KING: (BUTTON_SIZE),
             WORLD1BGRD: (1280, 720),
             CRATE1: (230, 230),
             NOTHING: (107, 107),
             NEXT_BUTTON: (958, 383),
             GUIDE_BUTTON: (BUTTON_SIZE),
             HINT_BUTTON: (958, 383),
             LVL1_COMPLETED: (BUTTON_SIZE),
             LVL2_UNCOMPLETED: (BUTTON_SIZE),
             LVL2_COMPLETED: (BUTTON_SIZE),
             LVL3_UNCOMPLETED: (BUTTON_SIZE),
             LVL3_COMPLETED: (BUTTON_SIZE),
             LVL4_UNCOMPLETED: (BUTTON_SIZE),
             LVL4_COMPLETED: (BUTTON_SIZE),
             LVL5_UNCOMPLETED: (BUTTON_SIZE),
             LVL5_COMPLETED: (BUTTON_SIZE),
             LVL6_UNCOMPLETED: (BUTTON_SIZE),
             LVL6_COMPLETED: (BUTTON_SIZE),
             LVL7_UNCOMPLETED: (BUTTON_SIZE),
             LVL7_COMPLETED: (BUTTON_SIZE),
             LVL8_UNCOMPLETED: (BUTTON_SIZE),
             LVL8_COMPLETED: (BUTTON_SIZE),
             LVL9_UNCOMPLETED: (BUTTON_SIZE),
             LVL9_COMPLETED: (BUTTON_SIZE),
             LVL10_UNCOMPLETED: (BUTTON_SIZE),
             LVL10_COMPLETED: (BUTTON_SIZE),
             LVL11_UNCOMPLETED: (BUTTON_SIZE),
             LVL11_COMPLETED: (BUTTON_SIZE),
             LVL12_UNCOMPLETED: (BUTTON_SIZE),
             LVL12_COMPLETED: (BUTTON_SIZE),
             LVL13_UNCOMPLETED: (BUTTON_SIZE),
             LVL13_COMPLETED: (BUTTON_SIZE),
             LVL14_UNCOMPLETED: (BUTTON_SIZE),
             LVL14_COMPLETED: (BUTTON_SIZE),
             LVL15_UNCOMPLETED: (BUTTON_SIZE),
             LVL15_COMPLETED: (BUTTON_SIZE),
             LVL16_UNCOMPLETED: (BUTTON_SIZE),
             LVL16_COMPLETED: (BUTTON_SIZE)}  


    button_levels1 = []
    for i in range(1,9):
        if i == 1:
            lvlbutton_x = WIDTH/2 - 450
            lvlbutton_y = HEIGHT/2 - 93
        elif i == 5:
            lvlbutton_x = WIDTH/2 - 450
            lvlbutton_y = HEIGHT/2 + 180
        button_levels1.append(Button([lvlbutton_x,lvlbutton_y], (lvlbutton_width/4, lvlbutton_height/4), world_1_buttons[i-1], 'level ' + str(i)))
        lvlbutton_x += 300
        
    button_levels2 = []
    #creates buttons for levels in world 2
    for i in range(9, 17):
        if i == 9:
            lvlbutton_x = WIDTH/2 - 450
            lvlbutton_y = HEIGHT/2 - 93
        elif i == 13:
            lvlbutton_x = WIDTH/2 - 450
            lvlbutton_y = HEIGHT/2 + 180
        button_levels2.append(Button([lvlbutton_x,lvlbutton_y], (lvlbutton_width/4, lvlbutton_height/4), world_2_buttons[i-16], 'level ' + str(i)))
        lvlbutton_x += 300
            
    if current_scene == 'menu':
        menu_effects.fadein()
        TALKING_SOUND.rewind()
        tutorial_sfx.fadeout()
        world_1_sfx.fadeout()
        canvas.draw_image(MENU_IMAGE, 
                      (WIDTH / 2, HEIGHT / 2),
                      (WIDTH, HEIGHT),
                      (WIDTH / 2, HEIGHT / 2),
                      (WIDTH, HEIGHT))
        draw_scene = scene_menu
    if current_scene == 'level select 1':
        menu_effects.fadeout()
        tutorial_sfx.fadeout()
        world_1_sfx.fadein()
        scene_lvlselect1 = Scene('level select 1', button_levels1 + [button_menu] + [button_next1])
        
        draw_scene = scene_lvlselect1
        canvas.draw_image(SELECTIONBGRD, 
                      (selectionbgrd_width / 2, selectionbgrd_height / 2),
                      (selectionbgrd_width, selectionbgrd_height),
                      (WIDTH / 2, HEIGHT / 2),
                      (WIDTH, HEIGHT))
    
    if current_scene == 'level select 2' or current_scene in world_2:
        
        canvas.draw_image(OCEANBGRD, 
                      (selectionbgrd_width / 2, selectionbgrd_height / 2),
                      (selectionbgrd_width, selectionbgrd_height),
                      (WIDTH / 2, HEIGHT / 2),
                      (WIDTH, HEIGHT))
        
        scene_lvlselect2 = Scene('level select 2', button_levels2 + [button_lvlselect1] + [button_next2])
        draw_scene = scene_lvlselect2
        
    if current_scene in levels:
        guidemenu = False   
        if current_scene in world_1 or current_scene in fulltutorial_list:
            width, height = IMG_SIZES[WORLD1BGRD]
            canvas.draw_image(WORLD1BGRD, 
                      (width / 2, height / 2),
                      (width, height),
                      (WIDTH / 2, HEIGHT / 2),
                      (WIDTH, HEIGHT))
            
            
        if current_scene not in fulltutorial_list:    
            draw_scene = scene_lvl
            menu_effects.fadeout()
            world_1_sfx.fadein()
        else:
            tutorial_sfx.fadein()
            menu_effects.fadeout()
        for block in block_list:
            block.draw(canvas)
        
       
            
        piece_positions = []    
        if w_kings != []:
            for w_king in w_kings:
                w_king.draw(canvas)
                if w_king in piece_list:
                    piece_list.remove(w_king)
                piece_list.append(w_king)
                piece_positions.append(w_king.pos)
   
        
        if w_bishops != []:
            for w_bishop in w_bishops:
                w_bishop.draw(canvas)
                if w_bishop in piece_list:
                    piece_list.remove(w_bishop)
                piece_list.append(w_bishop)
                piece_positions.append(w_bishop.pos)

        
        if w_rooks != []:
            for w_rook in w_rooks:
                w_rook.draw(canvas)
                if w_rook in piece_list:
                    piece_list.remove(w_rook)
                piece_list.append(w_rook)
                piece_positions.append(w_rook.pos)


        if w_knights != []:
            for w_knight in w_knights:
                w_knight.draw(canvas)
                if w_knight in piece_list:
                    piece_list.remove(w_knight)
                piece_list.append(w_knight)
                piece_positions.append(w_knight.pos)
            
        for piece in piece_list:
            piece.update()

        for crate in crate_list:
            crate.draw(canvas)
            crate.update()
        
        if crate_list != []:
            block_numbers = list(range(1, 17)) + crates
        else:
            block_numbers = list(range(1, 17))
            
        if b_king != []:
            b_king[0].draw(canvas)
            
        for piece in piece_list:
            if piece.falling == True:
                legalmove = False
                    
        if current_scene != 'guide':
            for line in range(0, 20):
                canvas.draw_line((0, line * TILE_SIZE[0]), (WIDTH, line * TILE_SIZE[0]), 0.3, 'white')
                canvas.draw_line((line * TILE_SIZE[0], 0), (line * TILE_SIZE[0], HEIGHT), 0.3, 'white')
    if current_scene == 'guide':

        canvas.draw_image(CHESS_MOVES, 
                          (WIDTH / 2, HEIGHT / 2),
                          (WIDTH, HEIGHT),
                          (WIDTH / 2, HEIGHT / 2),
                          (WIDTH, HEIGHT))
            
        draw_scene = scene_guide1
        guidemenu = True
        for piece in piece_list:
            piece.selected = False
    if current_scene == 'guide 2':
        canvas.draw_image(CHESS_MOVES2, 
                      (WIDTH / 2, HEIGHT / 2),
                      (WIDTH, HEIGHT),
                      (WIDTH / 2, HEIGHT / 2),
                      (WIDTH, HEIGHT))
        draw_scene = scene_guide2
        
    draw_scene.draw(canvas)
    
    
    #draws tutorial scenes in the game
    if "tutorial" in current_scene:
        scene_and_scene_number = current_scene.split()
        if len(scene_and_scene_number) == 2:
            scene_num = int(scene_and_scene_number[1])
           
            if 1 <= scene_num <= 9 or scene_num == 12 or 36 <= scene_num <= 37 or 39 <= scene_num <= 41:
                
                draw_scene = scene_tutorials[scene_num]
                cguidedialogues[scene_num].draw(canvas)
                cguidedialogues[scene_num].update()
            elif scene_num == 10 or scene_num == 34:
                draw_scene = scene_tutorials[scene_num]
                
                
                if b_king != []:    
                    if b_king[0].dead == True:
                            draw_scene = scene_tutorials[scene_num+1]
                            
                            cguidedialogues[scene_num+1].draw(canvas)
                            cguidedialogues[scene_num+1].update()
                    else:
                        TALKING_SOUND.rewind()
            elif scene_num == 13:
                draw_scene = scene_tutorials[scene_num+1]
                cguidedialogues[scene_num].draw(canvas)
                cguidedialogues[scene_num].update()
                
            elif scene_num == 15:
                draw_scene = scene_tutorials[scene_num]
                canvas.draw_image(CHESS_MOVES, 
                      (width / 2, height / 2),
                      (width, height),
                      (WIDTH / 2, HEIGHT / 2),
                      (WIDTH, HEIGHT))
                TALKING_SOUND.rewind()
                
                draw_scene = scene_tutorials[scene_num]
                draw_scene.draw(canvas)
            
            elif scene_num == 16:
                canvas.draw_image(CHESS_MOVES2, 
                                  (width / 2, height / 2),
                                  (width, height),
                                  (WIDTH / 2, HEIGHT / 2),
                                  (WIDTH, HEIGHT))
                draw_scene = scene_tutorials[scene_num]
                draw_scene.draw(canvas)
                
            elif 17 <= scene_num <= 33:
                
                draw_scene = scene_tutorials[scene_num]
                cguidedialogues[scene_num-2].draw(canvas)
                cguidedialogues[scene_num-2].update()
                
        
        elif len(scene_and_scene_number) == 3:
            draw_scene = scene_tutorials[39]
            cguidedialogues[33].draw(canvas)
            cguidedialogues[33].update()
        else:
            draw_scene = scene_tutorials[40]
            cguidedialogues[34].draw(canvas)
            cguidedialogues[34].update()
   
current_scene = 'menu'    
button_start_game = Button([WIDTH/2,HEIGHT/2],
                           (button_width/2, button_height/2), 
                           START_BUTTON, 'level select 1')   

button_tutorial = Button([WIDTH/2,HEIGHT/2 + 200],
                           (button_width/2, button_height/2), 
                           TUTORIAL_BUTTON, 'tutorial 1') 

menu_effects = Musicsfx(LEVEL_SELECT_MUSIC, 0)
world_1_sfx = Musicsfx(WORLD1_MUSIC, 0)
tutorial_sfx = Musicsfx(TUTORIAL_MUSIC, 0)


cguidemessages = [
    '',
    "Hey there! Welcome to the world  of Chess Climb!",
    "The name is Sir Chesster III.    Nice to meet you :)",
    "Anyways, let's jump straight     into the basics!",
    "Each level has a black king in   a designated spot.",
    "Your goal is simple.             ELIMINATE  him.",
    "Try it out! Click on your white  king to select it!",
    "Remember, kings can only move    one spot in each direction.",
    "Also, the game remembers what    you've selected.",
    "So don't worry about repeatedly  selecting the piece as you move.",
    "Great job! You ELIMINATED him    real good!",
    "Let's make sure you're familiar  with the rules of chess.",
    "Here are the movement patterns   for each piece in the game.",
    "I'm going to recap to make sure  this is clear.",
    "Kings can only move one spot in  each direction.",
    "Bishops can move diagonally. ",
    "Knights can move in any L shape  pattern.",
    "Rooks can move in any straight   line.",
    "Queens are are a rook, king,     and bishop combined.",
    "Lastly, pawns can move one tile  forward.",
    "The only exception being on its  first move.",
    "Don't worry if you can't         remember!",
    "You can open the guide at any    point during a level!",
    "Great! You now know how chess    works!",
    "Now let's figure out the         climbing part of chess climb!",
    "Chess pieces in this game are    affected by gravity.",
    "There's also a rule that applies to all pieces except the knight.",
    "Their paths can blocked by       pieces or blocks!",
    'However, knights can "jump" over pieces and blocks!',
    "Now try this level! ",
    "I'll be here for you if you need any help! ",
    "The king is blocking the way of  the rook!",
    "Try finding a way to clear the   rook's path!",
    "Great work! ",
    "You're now ready to be a chess   climbing champion! ",
    "Good luck on your journey! "
]


cguidedialogues = []
dialogue_tick = 1
#stores chess guide's dialogues
for i in range(38):
    if i == 10 or i == 14:
        cguidedialogues.append(None)
    else:
        cguidedialogues.append(Dialogue([WIDTH / 2, HEIGHT / 2], cguidemessages[dialogue_tick-1]))
        dialogue_tick += 1
        
button_tutorials = []
#allows player to click to go through tutorial dialogues
for i in range(1,41):
    if i == 15 or i == 16:
        button_tutorials.append(Button([WIDTH/2, HEIGHT/2], (button_width/4, button_height/4), NEXT_BUTTON, 'tutorial ' + str(i + 1)))
    
    elif i == 37:
        button_tutorials.append(Button([WIDTH/2, HEIGHT/2], (WIDTH, HEIGHT), NOTHING, 'menu'))
        
    elif i == 38:
        button_tutorials.append(Button([WIDTH/2 + 500,HEIGHT/2 - 310], (button_width/5, button_height/5), HINT_BUTTON, 'tutorial 34 hint'))
        
    elif i == 39:
        button_tutorials.append(Button([WIDTH/2,HEIGHT/2], (WIDTH, HEIGHT), NOTHING, 'tutorial 34 hint 2'))
    elif i == 40:
        button_tutorials.append(Button([WIDTH/2,HEIGHT/2], (WIDTH, HEIGHT), NOTHING, 'tutorial 34'))
    else:
        button_tutorials.append(Button([WIDTH/2,HEIGHT/2], (WIDTH, HEIGHT), NOTHING, 'tutorial ' + str(i + 1)))

button_levels1 = []
lvlbutton_x = WIDTH/2 - 380
lvlbutton_y = HEIGHT/2 - 93
#creates buttons for levels in world 1
for i in range(1,9):
    if i == 1:
        lvlbutton_x = WIDTH/2 - 450
        lvlbutton_y = HEIGHT/2 - 93
    elif i == 5:
        lvlbutton_x = WIDTH/2 - 450
        lvlbutton_y = HEIGHT/2 + 180
    button_levels1.append(Button([lvlbutton_x,lvlbutton_y], (lvlbutton_width/4, lvlbutton_height/4), world_1_buttons[i-1], 'level ' + str(i)))
    lvlbutton_x += 300

button_levels2 = []
#creates buttons for levels in world 2
for i in range(9, 17):
    if i == 9:
        lvlbutton_x = WIDTH/2 - 450
        lvlbutton_y = HEIGHT/2 - 93
    elif i == 13:
        lvlbutton_x = WIDTH/2 - 450
        lvlbutton_y = HEIGHT/2 + 180
    button_levels2.append(Button([lvlbutton_x,lvlbutton_y], (lvlbutton_width/4, lvlbutton_height/4), world_2_buttons[i-9], 'level ' + str(i)))
    lvlbutton_x += 300
        
        
button_guide = Button([WIDTH/2 - 570,HEIGHT/2 - 310], (lvlbutton_width/9, lvlbutton_height/9), GUIDE_BUTTON, 'guide')     
button_guide1 = Button([WIDTH/2, HEIGHT/2], (button_width/4, button_height/4), NEXT_BUTTON, 'guide 2')
button_guide2 = Button([WIDTH/2, HEIGHT/2], (button_width/4, button_height/4), NEXT_BUTTON, current_level)
button_hint1 = Button([WIDTH/2 + 500,HEIGHT/2 - 310], (button_width/5, button_height/5), HINT_BUTTON, 'tutorial 35 hint') 
button_restartlvl = Button([WIDTH/2 - 450,HEIGHT/2 - 310], (lvlbutton_width/9, lvlbutton_height/9), RESTART_BUTTON, 'tutorial 34') 
button_levelback = Button([WIDTH/2 - 570,HEIGHT/2 - 310], (lvlbutton_width/9, lvlbutton_height/9), BACK_BUTTON, 'level select 1') 
button_tutoriallevelback = Button([WIDTH/2 - 570,HEIGHT/2 - 310], (lvlbutton_width/9, lvlbutton_height/9), BACK_BUTTON, 'menu') 
button_menu = Button([WIDTH/2 - 475,HEIGHT/2 - 280], (button_width/4, button_height/4), MENU_BACK_BUTTON, 'menu') 
button_lvlselect1 = Button([WIDTH/2 - 475,HEIGHT/2 - 280], (button_width/4, button_height/4), MENU_BACK_BUTTON, 'level select 1') 
button_next1 = Button([WIDTH/2 + 490,HEIGHT/2 - 280], (button_width/4, button_height/4), NEXT_BUTTON, 'level select 2') 
button_next2 = Button([WIDTH/2 + 490,HEIGHT/2 - 280], (button_width/4, button_height/4), NEXT_BUTTON, 'level select 3') 
scene_menu = Scene('menu', [button_start_game, button_tutorial])
scene_lvlselect1 = Scene('level select 1', button_levels1 + [button_menu] + [button_next1])
scene_lvlselect2 = Scene('level select 2', button_levels2 + [button_lvlselect1] + [button_next2])
scene_lvl = Scene('level 1', [button_restartlvl, button_levelback, button_guide])
scene_tutorials = []

for i in range(1,42):
    if i == 35:
        scene_tutorials.append(Scene('tutorial ' + str(i),[button_restartlvl, button_guide, button_tutorials[i+2]]))
    elif i == 40:
         scene_tutorials.append(Scene('tutorial 34 hint',[button_tutorials[i-2]]))
    elif i == 41:
         scene_tutorials.append(Scene('tutorial 34 hint 2',[button_tutorials[i-2]]))    
    else: 
        scene_tutorials.append(Scene('tutorial ' + str(i),[button_tutorials[i-2]] if i != 11 else []))

draw_scene = scene_menu

frame = simplegui.create_frame("Chess Climb", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_mouseclick_handler(mouse_click)
frame.start()
